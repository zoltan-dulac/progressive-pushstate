<!-- noformat on -->
<div class="image-container">
<!--
  *
  * Note: The widths here are a result of the two break points (360, 768),
  * the desktop max-width of an image (835).  We then took all of these
  * numbers and multiplied by two for a retina display.
  * 
  * The conditional comments are there in case IE9 is visiting this site,
  * since it has a problem with <picture>.
  * 	
  * We don"t use picturefill, because all modern browsers can handle this
  * (yay!)
  * 
  * We removed the JXR renditions, because they weren"t as good as the MOZ
  * JPEG ones. 
  *
  * Command that generated this page and assoicated images:
  * html5ImageConverter.sh --jxr-nconvert --jpg-quals=33 --webp-quals=30 --jp2-rates=0.39 --sizes=360/720/768/835/1536/1670 --no-png --use-mozjpeg --jxr-quals=1 /images/7221/blog-post.png 
  *
-->

<picture class="alignnone size-full wp-image-7224 full-bleed full-width">
  <!--[if IE 9]><video style="display: none;"><![endif]-->
  <source srcset="/images/7221/blog-post-360.jxr 360w, /images/7221/blog-post-720.jxr 720w, /images/7221/blog-post-768.jxr 768w, /images/7221/blog-post-835.jxr 835w, /images/7221/blog-post-1536.jxr 1536w, /images/7221/blog-post-1670.jxr 1670w" type="image/vnd.ms-photo">
  <source srcset="/images/7221/blog-post-360.jp2 360w, /images/7221/blog-post-720.jp2 720w, /images/7221/blog-post-768.jp2 768w, /images/7221/blog-post-835.jp2 835w, /images/7221/blog-post-1536.jp2 1536w, /images/7221/blog-post-1670.jp2 1670w" type="image/jp2">
  <source srcset="/images/7221/blog-post-360.webp 360w, /images/7221/blog-post-720.webp 720w, /images/7221/blog-post-768.webp 768w, /images/7221/blog-post-835.webp 835w, /images/7221/blog-post-1536.webp 1536w, /images/7221/blog-post-1670.webp 1670w" type="image/webp">
  
  <!--[if IE 9]></video><![endif]-->
  <img class="full-bleed full-width" srcset="/images/7221/blog-post-360.jpg 360w, /images/7221/blog-post-720.jpg 720w, /images/7221/blog-post-768.jpg 768w, /images/7221/blog-post-835.jpg 835w, /images/7221/blog-post-1536.jpg 1536w, /images/7221/blog-post-1670.jpg 1670w"  />
</picture>
</div>
<!-- noformat off -->


With frameworks like <a href="https://facebook.github.io/react/" title="React JS website">React</a> in vogue today, there is a lot of HTML being rendered exclusively on the client instead of the server, where it has traditionally occured.  While this can result in some really snappy and slick interactions, there are a few issues with doing this:    

<ol>
<li>They do not work when the client has JavaScript turned off.</li>
<li>In low bandwidth environments, performance will be sluggish at load time if the application is JavaScript heavy, since (usually) the majority of the JavaScript needs to load before the page state can be applied to the application.  This is especially a huge consideration with wireless connections, where you cannot guarantee a great signal all the time.</li>
<li>Sharing that state of a "single page application" via social media/email/instant messaging platforms can be problematic <strong>unless the URL can change when the state changes</strong>.
</ol>

To handle the first two issues, <strong>the first-render of the application should be done by the server instead of the client.</strong>  This will allow users to see the page data immediately while the page loads all the assets, increasing the performance of the page at load time. Also, as the state of the page changes, the query string should also change.  If the user wants to share that change, then it's easy as sharing that URL with the query string change.  And since the first-render of that page will be done by the server, you can program the server side code to have the application give appropriate <a href="https://developers.facebook.com/docs/sharing/webmasters" title="Open Graph information from Facebook.">Facebook Open Graph</a> and <a href="https://dev.twitter.com/cards/markup" title="Twitter Card meta information resource from Twitter">Twitter Card</a> meta tag information that reflects that change to social media sites to make sharing nicer.

When HTML5 single page applications first became popular a while back, we hit a snag &mdash; we couldn't change the query string of the application without causing a browser refresh.  In order to work around this, many JavaScript routing frameworks (like Backbone) would change the <a href="https://en.wikipedia.org/wiki/Fragment_identifier" title="Wikipedia page for Fragment Identifier.">URL hash</a> of the page in order to maintain state.  This worked, but at a cost of sharing the state &mdash; social media sites would not be able to know the state of the application since the <a href="http://stackoverflow.com/questions/940905/can-i-read-the-hash-portion-of-the-url-on-my-server-side-application-php-ruby" title="Stack Overflow page, 'Can I read the hash portion of the URL on my server-side application'">URL hash is never sent to the server via HTTP</a>.  Furthermore, <a href="https://coderwall.com/p/gqqmdq/fragment-identifiers-and-the-facebook-like-button" title="Coderwall article 'Fragment Identifiers and the Facebook Like Button'">Social Media platforms like Facebook cannot use Fragment Identifiers to distinguish different states of an application</a>, which causes issues if you want Facebook users to be able to "Like" specific states of an application (e.g. the photo-gallery section of the application vs. other parts of the page).

Now, however, we can use HTML5 <a href="http://caniuse.com/#search=pushState">Session Management</a> to change the browser's URL within a single page web application without the browser going to the server to load the page for that URL.  Furthermore, when the user clicks the back button, this Session Management API can be used to ensure that state of the page for that URL can also be rendered without a full server page load.  I took this a step further and wrote <a href="https://github.com/zoltan-dulac/progressive-pushstate">progressive-pushstate</a>, which parses the data from the query string and set's this as the application's <code>history.state</code> (the JavaScript object that HTML5 Session Management uses to keep state).  Links and forms on the page that change the document's query string can be rendered by JavaScript the same way they would be rendered if that URL and query string were requested by the web server.  This also allows us to change the query string if form elements are changed without hitting the submit button.

If you are confused about the power of this, let's look at some simple examples.

<h2>Example 1: A Simple Mobile/Desktop Navigation System</h2>

Let's say you have to build a website that has uses a <code>&lt;select&gt;</code> box "hamburger" menu in the mobile breakpoint, but a traditional "list of links" menu for the larger breakpoints: 

<!-- noformat on -->
<table class="dataTable noDataPadding">
<caption class="visually-hidden">This table contains screenshots of a web page that uses a select-box hamburger menu in the mobile breakpoint, and a traditional nav bar for larger breakpoints</caption>
<thead>
<tr><th>Mobile Breakpoint</th><th>Desktop Breakpoint</th></tr>
</thead>
<tbody>
<tr>
<td>
<img src="http://www.useragentman.com/blog/wp-content/uploads/2016/11/example-2-mobile_sm.jpg" alt="screenshot of desktop version of video game demo" width="383" height="639" class="alignnone size-full wp-image-7302" />
</td>
<td>
<img src="http://www.useragentman.com/blog/wp-content/uploads/2016/11/example-2-desktop_sm.jpg" alt="screenshot of desktop version of video game demo" width="300" height="229" class="alignnone size-medium wp-image-7301" />
</td>
</tr>
</tbody>
</table>
<!-- noformat off -->

<a class="exampleLink" href="http://useragentman.com/examples/progressive-pushstate/examples/example01.php">Look at live version of the the hybrid nav solution using progressive-pushstate</a>

Let's look briefly at the markup that makes this happen:

<blockquote class="code">
<pre>
&lt;nav class="fixedsticky"&gt;
    
  &lt;!-- The CSS makes this visible only when the page is wider than 768px --&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=home"&gt;Home&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a <span class="hilite">class="pp-link" href="?f=donkey-kong"</span>&gt;Donkey Kong&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=pac-man"&gt;Pac-Man&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=robotron"&gt;Robotron&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=tempest"&gt;Tempest&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;!-- The CSS makes this visible only when the page is narrower than 768px --&gt;
  &lt;form <span class="hilite">class="pp-form" data-pp-events="change"</span>&gt;
    &lt;select name="f"&gt;
      &lt;option value="home" selected&gt;Home&lt;/option&gt;
      &lt;option <span class="hilite">value="donkey-kong"</span>&gt;Donkey Kong&lt;/option&gt;
      &lt;option value="pac-man"&gt;Pac-Man&lt;/option&gt;
      &lt;option value="robotron"&gt;Robotron&lt;/option&gt;
      &lt;option value="tempest"&gt;Tempest&lt;/option&gt;
    &lt;/select&gt;

  &lt;/form&gt;
&lt;/nav&gt;

&lt;script src="/path/to/progressive-pushstate.js"&gt;&lt;/script&gt;  
&lt;!-- not needed for progressive-pushstate, but used in page code --&gt;
&lt;script src="/path/to/jquery-3.1.1.min.js"&gt;&lt;/script&gt;
&lt;script src="/path/to/example02.js"&gt;&lt;/script&gt;

</pre>
</blockquote>

If you take a look at the navigation markup, you will see that the links will submit a query string that would be identical if the form were to submit.  Since the links have a class of <code>pp-link</code>, progressive-pushstate will know to handle the links. Since the form has a class of <code>pp-form</code> and has <code>data-pp-events</code> set to <code>"change"</code>, progressive-pushstate knows that it must fire when any of its fields change.

So, how does progressive-pushstate know what to do?  In example02.js, you will see the following code:

<blockquote class="code">
<pre>
var example1 = new function () {
  
  // Use me to avoid using .bind() all over the place.
  var me = this;
  
  me.init = function () {
    pp.init(me.popstateEvent);
  };
  
  me.popstateEvent = function(e) {
    currentState = e.state;
    
    /*
     * At this point, `currentState.f` will be set to whatever value `f` is in
     * the query string.
     */
    
    .
    .
    .
    // rest of the logic is here.
  }
}

example1.init();
</pre>
</blockquote>

The <code>init()</code> method calls <code>pp.init(me.popstateEvent)</code>, which initializes progressive-pushstate so that <code>pp-link</code> links and <code>pp-form</code> forms will be handled by the script. When these links and forms are used, progressive-pushstate will convert the resultant query string  to a JavaScript object and set it as the pushState for that URL.  It will then call example1.js's <code>popstateEvent()</code>, which will change the contents of the main part of the page by grabbing an HTML fragment that corresponds to that page (for the sake of brevity, this logic is not shown in this article, but if you want, please take a look at the <a href="https://github.com/zoltan-dulac/progressive-pushstate/blob/master/examples/js/example01.js">full source of example1.js</a> to understand how it works).  Note that the `popstateEvent()` method uses `e.state` to find out the state of the page ... this is the pushState object we mentioned earlier.

There is one thing I did gloss over here &mdash; if JavaScript is turned off (or if the browser doesn't support progressive-pushstate) the mobile navigation will fail to do anything when the select box value changes.  Since we want things to be bullet proof, we add this to the the mobile menu:

<blockquote class="code">
<pre>
&lt;nav class="fixedsticky"&gt;
  
    &lt;!-- The CSS makes this visible only when the page is wider than 768px --&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=home"&gt;Home&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=donkey-kong"&gt;Donkey Kong&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=pac-man"&gt;Pac-Man&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=robotron"&gt;Robotron&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class="pp-link" href="?f=tempest"&gt;Tempest&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;!-- The CSS makes this visible only when the page is narrower than 768px --&gt;
  &lt;form class="pp-form" data-pp-events="change"&gt;
    &lt;select name="f"&gt;
      &lt;option value="home" selected&gt;Home&lt;/option&gt;
      &lt;option value="donkey-kong"&gt;Donkey Kong&lt;/option&gt;
      &lt;option value="pac-man"&gt;Pac-Man&lt;/option&gt;
      &lt;option value="robotron"&gt;Robotron&lt;/option&gt;
      &lt;option value="tempest"&gt;Tempest&lt;/option&gt;
    &lt;/select&gt;
    
<div class="hilite">    &lt;!-- 
      * This button only appears when the library is not supported by the
      * browser, or if JavaScript is turned off
    --&gt;
    &lt;input class="pp-no-support-button" type="submit" 
      aria-label="Go to page selected" value="Go" /&gt;</div>
    
  &lt;/form&gt;
&lt;/nav&gt;
</pre>
</blockquote>

Note the submit button with the className <code>pp-no-support-button</code>.  We want users to press this button if the browser doesn't support progressive-pushstate.   This will allow the page to submit the form data the old fashioned way so that the page can generate the right HTML on the server.  If you look at the code for <a href="https://github.com/zoltan-dulac/progressive-pushstate/blob/master/examples/example01.php">example01.php</a>, you will see PHP code that does this (this PHP code also does the first render of the page).

We use the following CSS to show this button only when the browser can't support progressive-pushstate (or when JavaScript is turned off):

<blockquote class="code">
<pre>
.pp-no-support-button {
	display: inline-block;
}

.pp-support .pp-no-support-button {
	display: none;
}
</pre>
</blockquote>

The classes <code>pp-support</code> is set on the <code>&lt;html&gt;</code> tag by progressive-pushstate when the page loads if the browser is supported by the library &madash; if not, the library sets the <code>pp-no-support</code> class instead. 
<em>Add stuff about the fallback button</em>.  These classes allow developers to give an alternative UI if the library is no supported.  These fallback features that give an expected (but not as sexy) user experience to older and JavaScript-disabled browsers are a great example of progressive enhancement, which is why I called this library <strong>progressive-</strong>pushstate.js

If you use the navigation functionality in the above example to go to several pages, try hitting the back button.  You will notice it remembers history perfectly.  This is because pressing the browser history buttons (i.e. back and forward) will also invoke the <code>popstateEvent</code> as well.  History management happens for free!

Let's take a look at another example.

<h2>Example 2: A "Search As You Type" Page</h2>

Many Search Engines (including Google) will show results while the user types in a form.  Let's look at an example that uses <code>progressive-pushstate</code>:

[caption id="attachment_7315" align="aligncenter" width="415"]<img src="http://www.useragentman.com/blog/wp-content/uploads/2016/11/example-3.jpg" alt="Screen capture of search example" width="415" height="238" class="size-full wp-image-7315" />This basic search form will go to the server while the user is typing in a search term.[/caption]

<a class="exampleLink" href="http://useragentman.com/examples/progressive-pushstate/examples/example02-form.php">Look at live version of the search example.</a>

You will note that the form will do a search while the user types a search string into it.  This is because we instructed <code>progressive-pushstate</code> to do a search <code>onkeypress</code>:

<blockquote class="code">
<pre>
&lt;form class="pp-form" <span class="hilite">data-pp-events="keypress submit"</span>&gt;
  &lt;label for="country"&gt;
    Country: 
    &lt;input
      autofocus
      type="text"
      id="country"
      name="country"
      placeholder="Please enter in a country."
      autocomplete="off" 
      value=""/&gt;
    &lt;/label&gt;
&lt;/form&gt;
</pre>
</blockquote>


The library automatically throttles these submissions in order to prevent really fast typers that type 200 characters a minute from killing the web server with 200 requests a minute.  Note also that history is again baked in, so if users make mistakes or want to see previous searches, they can just press the back button.  Finally, the fallback is simple for JavaScript disabled browsers or browsers that don't support this library &mdash; users can just hit enter to do a search.  This will cause a page refresh, but that's okay, since the sight still works as intended.

<h2>Example 3: A Filtered Table</h2>

In our third example, since I am currently working on an accessibility project with my current client, I wanted to build a page with a table that listed all the<a href="https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines"> WCAG 2.0 guidelines</a> with a way to filter them by principle (Perceivable, Operable, Understandable and Robust) as well as level (A, AA and AAA).

[caption id="attachment_7341" align="aligncenter" width="587"]<img src="http://www.useragentman.com/blog/wp-content/uploads/2016/12/wbag-example.jpg" alt="A screen shot of the table filtering example." width="587" height="300" class="size-full wp-image-7341" /> A screen shot of the table filtering example.[/caption]

<a class="exampleLink" href="http://useragentman.com/examples/progressive-pushstate/examples/example03-wcag.php">Look at live version of filtered table example.</a>

Again, with a modern browser with Javascript turned on, you will see a nice animation when new rows are added to the table.  When you refresh the page, the table with the proper filters will be generated on the server side.

<h2>Pitfalls and Solutions to Isomorphic Applications</h2>

The thing that developers have to keep in mind is that when doing any isomorphic coding, you should ensure that the client and the server both display the same data for each URL.  In examples #1 and #2, the AJAX requests use the query strings to an endpoint that returns HTML snippets which are placed in the page.  These HTML snippets are generated with the same PHP code.  If a user presses the browsers refresh button, the server will use that same PHP code to put that HTML snippet in the page.

The method was used in these examples for simplicity sake &mdash; however, most single page web applications that do AJAX requests return JSON that is parsed by the front-end JavaScript and translated to HTML.  If you want the same JSON payload to be parsed and translated to HTML on the server, you'd have to port that same code into whatever server side language you are using or run the same JavaScript you run on the client on the server as well.

Running server-side JavaScript is possible using Node, but what if you have an existing site that runs a different server-side technology?  Don't fret! Many other server side technologies can still run JavaScript.  For example:

<ul>
<li>I have worked on projects where we took <a href="http://olado.github.io/doT/index.html">DoT templates</a> and ran them on the server using <a href="https://github.com/erickzanardo/dj>DoT for Java</a> and <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Rhino</a>,a JavaScript engine that runs within the Java 6 and 7)</li>
<li><a href="http://winterbe.com/">Benjamin Winterberg</a> has written <a href="http://winterbe.com/posts/2015/02/16/isomorphic-react-webapps-on-the-jvm/">an interesting article on running React components on the server</a> using <a href="http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html">Nashorn</a> (the JavaScript engine that ships with Java 8)</li>
<li>If you are using PHP, I have heard that PHP's documentation on <a href="http://php.net/manual/en/book.v8js.php">V8 Javascript Engine Integration</a> can help run JavaScript within it.</li>
<li>If you are really kickin' it old school, <a href="https://metacpan.org/pod/JavaScript::SpiderMonkey">you can apparently run JavaScript in Perl as well.</a></li>
</ul>

In short, there doesn't seem to be a shortage of solutions of running JavaScript on a server if you can't use Node.

<h2>Do I Have To Use progressive-pushstate To Make My Applications Isomorphic?</h2>

Not at all. Here are some other solutions excellent solutions (just to name a few):

<ul>
<li>If you use React, Smashing Magazine's has a great article, <a href="https://www.smashingmagazine.com/2016/03/server-side-rendering-react-node-express/">Server-Side Rendering With React, Node And Express</a> (even if you don't use React, this has a great write-up on the advantages of programming isomorphically</li>
<li><a href="http://redux.js.org/docs/recipes/ServerRendering.html">The Redux document on server rendering</a> also has a great write-up on how to do this.</li>
<li>There is also a framework to <a href="https://github.com/saymedia/angularjs-server">run AngularJS apps on the server, using NodeJS</a>
</ul>

You will notice that all of these solutions (and a lot of others) rely on you using a specific framework.  I wanted something more generic, since it is not always possible to use these frameworks in every project (e.g. when you are interfacing with an existing package, when you are modifying an existing codebase, etc).  Also, I have found <strong>JavaScript packages are like opinions &mdash; everyone has one and even the most popular ones tend to change or disappear over time.</strong>  This is the reason I created progressive-pushstate.

<h2>Other Features of progressive-pushstate</h2>

There are more features to progressive-pushstate than shown in these examples. A full breakdown is available on the <a href="https://github.com/zoltan-dulac/progressive-pushstate">progressive-pushstate github page</a>.

<h2>Planned Upcoming Features of progressive-pushstate</h2>

<ul>
<li>One thing I would think would be great is if instead of using standard query strings (e.g. <code>http://domain.com/page?a=x&b=y&c=z</code>) developers could use directories slugs instead, like Expression Engine does (e.g. <code>http://domain.com/page/a/x/b/y/c/z</code>).</li>
<li>Another feature I would love to add is to ensure we can progressive-pushstate's data into a separate property in the pushState. That is to say, instead of having <code>http://domain.com/page?a=x&b=y&c=z</code> resulting in a pushState of this:

<blockquote class="code">
<pre>
{
  a: 'x',
  b: 'y',
  c: 'z'
}
</pre>
</blockquote>
it can result of a pushState of this:

<blockquote class="code">
<pre>
{
  pp: {
    a: 'x',
    b: 'y',
    c: 'z'
  }
}
</pre>
</blockquote>

The advantage for doing this, in my opinion, is to allow progressive-pushstate to play nice with other JavaScript libraries that work with the HTML5 Session API.  
</li>
</ul>

I definitely want to add both of these features in a not-so-distant future release when I get some extra time.  If anyone else  would like to work on these or any other improvement, please feel free to send me a pull request.  Alternatively, if you don't have the time to contribute would like to request a different features for this library, please feel to leave a comment on the <a href="https://github.com/zoltan-dulac/progressive-pushstate/issues">issue page for progressive-pushstate</a>.


<h2>Browser Support for progressive-pushstate</h2>

It works in all modern browsers (including many of the older browsers in current use, like IE10+ and Android Browser 4.3+) and if you ensure the server side can do the render all the states without JavaScript, the fallback for unsupported browsers (like Opera Mini or IE <= 9) is to let the server render the page.
